package com.vts.dms.dak.dao;

import java.time.LocalDateTime;
import java.util.List;

import com.vts.dms.dak.dto.DakAttachmentDto;
import com.vts.dms.dak.model.AssignReplyAttachment;
import com.vts.dms.dak.model.DakAcknowledged;
import com.vts.dms.dak.model.DakAssign;
import com.vts.dms.dak.model.DakAssignReply;
import com.vts.dms.dak.model.DakAssignReplyAttachRev;
import com.vts.dms.dak.model.DakAssignReplyRev;
import com.vts.dms.dak.model.DakAttachment;
import com.vts.dms.dak.model.DakCreate;
import com.vts.dms.dak.model.DakCreateAttach;
import com.vts.dms.dak.model.DakCreateDestination;
import com.vts.dms.dak.model.DakCreateLink;
import com.vts.dms.dak.model.DakLink;
import com.vts.dms.dak.model.DakMailAttach;
import com.vts.dms.dak.model.DakMailSentAttach;
import com.vts.dms.dak.model.DakMain;
import com.vts.dms.dak.model.DakMarked;
import com.vts.dms.dak.model.DakMarking;
import com.vts.dms.dak.model.DakMember;
import com.vts.dms.dak.model.DakMemberType;
import com.vts.dms.dak.model.DakNotification;
import com.vts.dms.dak.model.DakPnCReply;
import com.vts.dms.dak.model.DakPnCReplyAttach;
import com.vts.dms.dak.model.DakProData;
import com.vts.dms.dak.model.DakRemind;
import com.vts.dms.dak.model.DakReply;
import com.vts.dms.dak.model.DakReplyAttach;
import com.vts.dms.dak.model.DakSeekResponse;
import com.vts.dms.dak.model.DakTransaction;
import com.vts.dms.dak.model.SeekResponseReplyAttachment;
import com.vts.dms.master.model.NonProjectMaster;
import com.vts.dms.master.model.OtherProjectMaster;
import com.vts.dms.master.model.Source;
import com.vts.dms.model.Notification;

public interface DakDao {

	public List<Object[]> SourceList() throws Exception;
	public List<Object[]> DakDeliveryList() throws Exception;
	public List<Object[]> getLetterTypeList() throws Exception;
	public List<Object[]> getPriorityList() throws Exception;
	public List<Object[]> getRelaventList(String lab) throws Exception;
	public long insertDak(DakMain dak)throws Exception;
	public List<Object[]> DakPendingDistributionList(String DivisionCode,String LabCode,String UserName) throws Exception;
	public long DakAttachmentFile(DakAttachment model) throws Exception;
	public DakMain dakData(long dakId)throws Exception;
	public long saveDak(DakMain dak)throws Exception;
	public List<Object[]> GetAttachmentDetails(long dakid,String type) throws Exception;
	public Object[] DakAttachmentData(String Dakattachmentid) throws Exception;
	public int DeleteAttachment(String DakAttachmentId) throws Exception;
	public List<Object[]> getDakMembers() throws Exception;
	public List<Object[]> EmployeeList()throws Exception;
	public long insertMarkedDak(DakMarked dakMark)throws Exception;
	public long getDakAcknowledged(DakAcknowledged acknow)throws Exception;
	public Long NotificationInsert(Notification notif) throws Exception;
	public List<Object[]> DakAckNotifyList(long empId,String dakId) throws Exception;
	public List<Object[]> DakMarkedList(String dakId) throws Exception;
	public long getDakForwarded(String DakId,long Empid,String userName,String status)throws Exception;
	public long DakCount(String fromDate,String endDate) throws Exception ;
	public long DakCountFrDakNoCreation() throws Exception ;
	public List<Object[]> DakMarkNotifyList(long empId,String dakId) throws Exception;
	public long getDakTransInsert(DakTransaction trans)throws Exception;
	public List<Object[]> DakLinkList() throws Exception;
	public List<Object[]> NonProjectList() throws Exception;
	public long getDakProInsert(DakProData pro)throws Exception;
	public long addDakMember(DakMember member1)throws Exception ;
	public List<Object[]> getAllMemberList2(int i)throws Exception;
	public List<Object[]> getAllMemberList(int i,String member,String lab)throws Exception;
	public List<DakMemberType> getAllMemberType()throws Exception;
	public List<Object[]> getActionList() throws Exception;
	public List<Object[]> getCwList() throws Exception;
	public long getDakAssignInsert(DakAssign cw)throws Exception;
	public List<Object[]> getDivisionList() throws Exception;
	public List<Object[]> getSelectEmpList(String []empid,String lab) throws Exception;
	public int getDeletedMarked(String dakid)throws Exception;
	public int getDeletedPro(long dakid)throws Exception;
	public int getDeletedAssign(long dakid)throws Exception;
	public List<Object[]> getSelectDakEditList(String dakid) throws Exception;
	public long getDakReplyInsert(DakReply reply)throws Exception;
	public List<Object[]> getReplyAttachDetails(long replyid,long empId ,String type) throws Exception;
	public Object[] DakReplyAttachmentData(String DakReplyAttachmentId) throws Exception;
	public int DeleteReplyAttachment(String DakReplyAttachmentId) throws Exception;
	public int UpdateReply(DakAttachmentDto dakdto) throws Exception;
    public Object[] ReplyAttachmentData(String ReplyId,String type) throws Exception;
	public long insertDakAttach(DakMailAttach attach)throws Exception;
	public long insertDakSentAttach(DakMailSentAttach attach)throws Exception;
	public long getDakMarkingInsert(DakMarking marking) throws Exception;
	public long GetCountPrjDirEmpIdInPrev(long PrjDirEmpId,long DakId)throws Exception;
	public long DeletePrevPrjDirEmpId(long PrjDirEmpId,long DakId)throws Exception;
    public long DeleteSelMarkedEmployee(long DakId, long EmpId,long DakMemberTypeId,long DakMarkingId)throws Exception;
	public List<Object[]> getIndiMarkedEmpIdsFrmDakId(long DakId) throws Exception;
	public List<Object[]> dakReceivedList(String fromDate ,String toDate,String statusValue,long EmpId,String Username) throws Exception;
	public List<Object[]> dakPendingReplyList(String fromDate ,String toDate,String StatusValue,long EmpId,String Username, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
    public Object[] dakReceivedView(long empId, long dakId) throws Exception;
    public List<Object[]> GetDistributedDakMembers(long dakId) throws Exception;
	public int getDeletedMarking(Long dakId) throws Exception;
	public int getDeletedAttachment(Long DakAttachmentId) throws Exception;
	public int getSubDeletedAttachment(Long DakId ,String Type) throws Exception;
	public DakMain getDakIdDetails(Long dakId) throws Exception;
	public List<Object[]> getDistributedEmps(String dakId) throws Exception;
	public List<Object[]> getDistributedAssignedEmps(String dakId) throws Exception;
	public List<Object[]> getFacilitatorsList(long MarkedEmpId,long dakId) throws Exception;
	public String getPriorityOfParticularDak(long dakId) throws Exception;
	public long DakDistribute(String dakId, String date) throws Exception;
	public List<Object[]> getSelectSourceTypeList(String sourceId) throws Exception;
	public long getDakLinkDetails(DakLink link) throws Exception;
	public List<Object[]> dakLinkData(long dakId) throws Exception;
	public int DeletedDakLink(Long dakId) throws Exception;
	public long DakAck(long empId,long dakIdSel,String AckDate) throws Exception;
	public int RevokeMember(String dakMembersId,String UserName) throws Exception;
	public List<Object[]> DakDistributedList(long EmpId,String fromdate ,String todate) throws Exception;
	public long UpdateDakStatus(long dakIdSel) throws Exception;
	public List<Object[]> OtherProjectList() throws Exception;
	public List<Object[]> getassignemplist(String projectid,String lab,long EmpId) throws Exception;
	public List<Object[]> getseekResponseEmplist(String lab ,long EmpId,long divid) throws Exception;
	public Object getlabcode(long empId) throws Exception;
	public Object[] getUsername(long empId) throws Exception;
	public long DakAssignInsert(DakAssign assign) throws Exception;
	public long DakReplyInsert(DakReply replyModal) throws Exception;
	public DakMain GetDakDetails(long dakId)throws Exception;
	public List<Object[]> GetPrevReplyAttachmentDetails(long replyid) throws Exception;
    public long DakReplyAttachmentAdd(DakReplyAttach ReplyAttachModel)throws Exception;
    public List<Object[]>  getEmpListForAssigning (long DakId,String lab, long EmpId)throws Exception;
	public long dakAssignstatus(long DakMarkingIdsel) throws Exception;
	public List<Object[]> getDakAssignedList(long empId,String fromDate,String toDate,long SelEmpId) throws Exception;
	public Object[] getDaknoviewlist(long dakid) throws Exception;
	public List<Object[]>  GetReplyModalDetails(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetReplyAttachmentList(long DakReplyId) throws Exception;
	public Object[] DakReplyAttachData(String ReplyAttachmentId) throws Exception;
	public List<Object[]>  GetDakReplyDetails(long dakReplyId)throws Exception;
	public DakReply GetDakReplyEditDetails(long dakReplyId)throws Exception;
	public List<Object[]>  ReplyDakAttachmentData (long DakReplyAttachId, long DakReplyId)throws Exception;
	public long DeleteReplyAttachment(long DakReplyAttachmentId) throws Exception;
	public long DakReplyEditData(DakReply replyModal)throws Exception;
	public List<Object[]>  GetCSWReplyModalDetails(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetSpecificMarkersCSWReplyDetails(long DakId,long DakMarkingId)throws Exception;
	public List<Object[]>  GetReplyCSWAttachmentList(long DakAssignId) throws Exception;
	public List<Object[]>  GetParticularCSWReplyDetails(long DakAssignReplyId) throws Exception;
	public Object[] DakReplyCSWAttachData(String DakAssignReplyAttachmentId) throws Exception;
    public List<Object[]>  GetDakMarkersDetailsList (long DakId) throws Exception;
	public List<Object[]> DakDetailedList(String fromdate ,String todate,String StatusValue, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String empId,String DivisionCode,String LabCode,String UserName) throws Exception;
	public List<Object[]> DakDirectorList(String fromdate ,String todate,String StatusValue) throws Exception;
	public List<Object[]> DirPendingApprovalList(String lettertypeid,String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
	public List<Object[]> DakEmpDetailsList(String fromdate, String todate) throws Exception;
	public DakMarking getGetMarkedPersDetails(long DakMarkingId) throws Exception;
	public long UpdateDakDirAction(DakMarking dakMark)throws Exception;
	public List<Object[]> GetIndividualReplyDetails(long DakReplyId,long EmpId, long DakId)throws Exception;
	public List<Object[]> GetPrevAssignReplyAttachmentDetails(Long dakAssignId) throws Exception;
	public long AssignReplyInsert(DakAssignReply model) throws Exception;
	public long updateAssignStatus(long dakAssignId) throws Exception;
	public long DakNotificationInsert(DakNotification notification) throws Exception;
	public long InsertSourceDetails(Source source) throws Exception;
	public long InsertNonProjectDetails(NonProjectMaster nonProject) throws Exception;
	public long InsertOtherProjectDetails(OtherProjectMaster otherProject) throws Exception;
	public long AssignReplyAttachment(AssignReplyAttachment attachment) throws Exception;
	public long EmpIdCountOfDM(long dakIdSel) throws Exception;
	public long DakAckCountOfDM(long dakIdSel) throws Exception;
	public long DakReplyCountInDR(long dakIdSel) throws Exception;
	public long UpdateDakStatusToDR(long dakId)throws Exception;
	public List<Object[]> DakPnCDoList(String fromDate, String toDate,String StatusValue, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String empId, String actionId) throws Exception;
	public List<Object[]> DakPnCList(long EmpId,String LoginType, String fromDate, String toDate,String StatusValue) throws Exception;
	public List<Object[]> DakPnCPendingReplyList(long EmpId,String LoginType, String fromDate, String toDate,String StatusValue) throws Exception;
	public List<Object[]>  DakDetailForPNCDO(long DakId) throws Exception;
	public List<Object[]>  GetReplyDetailsFrmDakReply(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetReplyAttachsFrmDakReplyAttach() throws Exception;
	public long  DirApprovalActionUpdate(String DirApprovalVal,long DakId)  throws Exception;
	public long  UpdateDirAprvForwarderIdAndDakStatus(long EmpId,long DakId,String DakStatus)  throws Exception;
	public long DakPnCReplyInsert(DakPnCReply pncModel) throws Exception;
	public List<Object[]> GetPrevPnCReplyAttachmentDetails(long pncreplyid) throws Exception;
    public long DakPnCAttachmentAdd(DakPnCReplyAttach attachModel)throws Exception;
    public long  DakPnCUpdateStatus(long DakId)throws Exception;
    public List<Object[]>  GetMarkerReplySentForApprovalData(long DakId,long DirApvForwarderId)throws Exception;
	public List<Object[]>  GetPnCReplyDetails(long DakId)throws Exception;
	public List<Object[]>  GetPnCAttachReplyDetails(long DakPnCReplyId)throws Exception;
	public Object[] DakPnCReplyAttachData(String PnCReplyAttachId) throws Exception;
	public long DakApprovalUpdate(long DakId,String ApprovedBy,String ApprovedDate)throws Exception;
	public long DakApprovalWithCommtUpdate(long DakId,String ApprovalCommt,String ApprovedBy,String ApprovedDate)throws Exception;
	public long DakReturnUpdate(long DakId, String ReturnComment)throws Exception;
	public long DakPNCForwardUpdate(long DakId,String ForwardBy,String ForwardDate)throws Exception;
	public List<Object[]>  GetPnCReplyDataDetails(long PnCReplyId,long DakId)throws Exception;
	public List<Object[]>  ReplyDakPnCAttachmentData (long DakPnCReplyAttachId, long DakPnCReplyId)throws Exception;
	public long DeletePnCReplyAttachment(long PnCReplyAttachId,long DakPnCReplyId) throws Exception;
	public DakPnCReply GetPnCDetails(long DakPnCReplyId) throws Exception;
	public long  DakPnCReplyUpdate(DakPnCReply pncModel)  throws Exception;
	public long DakCloseUpdate(long DakId,String closedBy,String closedDateTime,String closedDate ,String closingCommt)throws Exception;
	public List<Object[]> DakClosedList(String fromDate,String toDate,String StatusValue,String LoginType,String Username,long EmpId, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId,String DivisionCode,String LabCode)throws Exception;
	public long RevokeMarking(String markingId) throws Exception;
	public List<Object[]> DakMemberGroup() throws Exception;
	public List<Object[]> getDakmemberGroupEmpList(String[] groupid,String labcode) throws Exception;
	public  List<Object[]> AssignReplyRemarks(long empId, long dakIdSel) throws Exception;
	public List<Object[]> GetAssignReplyAttachmentList(long dakAsssignReplyId) throws Exception;
	public List<Object[]> GetDakAssignReplyDetails(long dakAsssignReplyId) throws Exception;
	public DakAssignReply GetDakAssignReplyEditDetails(long dakAssignReplyId) throws Exception;
	public long AssignReplyEdit(DakAssignReply model) throws Exception;
	public List<Object[]> AssignReplyDakAttachmentData(long dakAssignReplyAttachId, long dakAssignReplyId) throws Exception;
	public int DeleteAssignReplyAttachment(String dakAssignReplyAttachId) throws Exception;
    public List<Object[]> DakMarkingData(long dakId) throws Exception;
	public List<Object[]> DakMarkedMemberGroup(String dakId) throws Exception;
    public List<Object[]> DakInactiveMarkedMemberGroup(String dakId) throws Exception;
	public long CSWReplyForwardReturn(long dakAssignReplyIdFrReturn,String ReturnRemarks) throws Exception;
	public long insertDakAssignReplyRev(DakAssignReplyRev replyRev) throws Exception;
	public long insertDakAssignReplyAttachRev(DakAssignReplyAttachRev attachRev) throws Exception;
	public long CountRevisionNo(Long dakAssignReplyId) throws Exception;
	public List<Object[]> getDakActionRequiredEdit(long actionRequiredDakId) throws Exception;
    public List<Object[]> ProjectDetailedList(String projectId) throws Exception;
	public long CSWReplyForwardReturn(long dakAssignReplyIdFrReturn) throws Exception;
	public long EditActionRequired(long actionRequiredEditDakId, long actionRequiredEdit,String ClosingAuthority,String EditRemarks) throws Exception;
	public DakAssign getDaAssignIdDetails(Long dakAssignId) throws Exception;
	public long UpdateAssign(DakAssign assign) throws Exception;
	public long EditActionRequired(long actionRequiredEditDakId, long actionRequiredEdit, String dueDate,String actionTime,String ClosingAuthority,String EditRemarks) throws Exception;
	public long updatedakmarkingaction(long actionRequiredEditDakId, long actionId,String dueDate) throws Exception;
	public long updatedakmarkingrecords(long actionRequiredEditDakId, long actionId) throws Exception;
	public long reupdateremarkstatus(String dakId) throws Exception;
	public List<Object[]> getReDistributedEmps(String dakId) throws Exception;
	public Object[] GetAssignId(Long dakId, Long dakMarkingId) throws Exception;
	public long updatemarkedactioninfo(long DakId, long EmpId, long MarkedId, String MarkerAction) throws Exception;
	public List<Object[]> getOldassignemplist(long dakId) throws Exception;
	public long UpdateMarkerAction(long dakId, long dakMarkingId, long empId, String actionValue) throws Exception;
	public List<Object[]> DakAssignedByMeList(long empId, String fromDate, String toDate,long SelEmpId) throws Exception;
	public List<Object[]> getalldaklinkdata(long dakId) throws Exception;
	public List<Object[]> DakRemarknRedistributeList(String fromDate, String toDate, String statusValue) throws Exception;
	public long Dakseekresponseinsert(DakSeekResponse seekresponseinsert) throws Exception;
	public List<Object[]> getDakSeekResponseListToMe(long empId, String fromDate, String toDate) throws Exception;
	public List<Object[]> DakSeekResponseByMeList(long empId, String fromDate, String toDate) throws Exception;
	public long SeekResponseReplyInsert(String reply, String replyStatus,String RepliedBy,String RepliedDate, Long seekResponseId) throws Exception;
	public List<Object[]> GetPrevSeekResponseReplyAttachmentDetails(Long seekResponseId) throws Exception;
	public long SeekResponseReplyAttachment(SeekResponseReplyAttachment attachment) throws Exception;
	public List<Object[]> GetSeekResponseRelyModalDetails(long dakId, long empId, String username, String createdBy) throws Exception;
	public List<Object[]> GetSeekResponseReplyAttachmentList(long dakReplyId) throws Exception;
	public List<Object[]> GetDakSeekResponseReplyDetails(long dakReplyId) throws Exception;
	public DakSeekResponse GetDakSeekResponseReplyEditDetails(long dakReplyId) throws Exception;
	public List<Object[]> SeekResponseReplyDakAttachmentData(long dakReplyAttachId, long dakReplyId) throws Exception;
	public int DeleteSeekResponseReplyAttachment(String dakReplyAttachId) throws Exception;
	public long SeekResponseReplyUpdate(String reply, String modifiedBy, String modifiedDate, Long seekResponseId) throws Exception;
	public Object[] DakSeekResponseAttachmentData(String dakattachmentid) throws Exception;
	public List<Object[]> getoldSeekResponseassignemplist(long dakId) throws Exception;
	public List<Object[]> PrevMarkedEmployees(long dakId) throws Exception;
	public long AddToFavourites(long dakMarkingId) throws Exception;
	public long RemoveFavourites(long dakMarkingId) throws Exception;
	public List<Object[]> DakRepliedToMeList(String username, String fromDate, String toDate) throws Exception;
	public List<Object[]> DakRepliedByMeList(long empId, String fromDate, String toDate, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
	public List<Object[]> getEmpListForSeekResponse(long dakId, String lab, long empId) throws Exception;
	public Object[] getClosedByDetails(String closedBy) throws Exception;
	public List<Object[]> EmpListDropDown(String lab) throws Exception;
	public Object[] MarkedEmpCounts(String emp, String fromDate, String toDate, String username) throws Exception;
	public Object[] AssignedEmpCounts(String emp, String fromDate, String toDate, String username) throws Exception;
	public Object[] dakReceivedViewrecived(long empId, long dakId) throws Exception;
	public List<Object[]> AssignData(long dakId, long empId) throws Exception;
	public List<Object[]> SeekResponseData(long dakId, long empId) throws Exception;
	public List<Object[]> MarkerData(long dakId, long empId) throws Exception;
	public Object getDakAttachId(Long dakId, String type) throws Exception;
	public List<Object[]> getSeekResponseList(long markedEmpId, long dakId) throws Exception;
	public List<Object[]> getFacilitatorSeekResponseList(long assignEmpId, long dakId) throws Exception;
	public List<Object[]> getRemindEmployeeList(long dakId) throws Exception;
	public long InsertDakRemind(DakRemind modal) throws Exception;
	public List<Object[]> getRemindToDetailsList(long dakId, long empId) throws Exception;
	public List<Object[]> getPerticularRemindToDetails(long dakId, long empId) throws Exception;
	public long UpdateDakRemind(String reply, long dakId, long empId, String replyDate) throws Exception;
	public Object[] EnoteAssignReplyData(long dakId,long EmpId) throws Exception;
	public List<Object[]> EnoteAssignReplyAttachmentData(long dakId) throws Exception;
	public List<Object[]> InitiatedByEmployeeList(long divisionId, String lab) throws Exception;
	public Object getDivisionId(long empId) throws Exception;
	public Object[] EnoteMarkerReplyData(long dakId, long empId) throws Exception;
	public List<Object[]> EnoteMarkerReplyAttachmentData(long dakReplyId) throws Exception;
	public Object[] MailSentDetails(String TypeOfHost) throws Exception;
	public List<Object[]> MailReceivedEmpDetails(long empId,String HostType) throws Exception;
	public Object getEmpName(long empId) throws Exception;
	public Object[] getDronaMailDetails(String typeOfHost) throws Exception;
	public List<Object[]> AttachmentsFilePath(long dakReplyAddResult) throws Exception;
	public long DakCreateCountFrDakNoCreation() throws Exception;
	public long insertDakCreate(DakCreate dak) throws Exception;
	public List<Object[]> GetDakCreateAttachmentDetails(Long dakCreateId, String type) throws Exception;
	public long DakCreateAttachmentFile(DakCreateAttach model) throws Exception;
	public long insertDakDestination(DakCreateDestination destination) throws Exception;
	public Object[] labDakData(long result) throws Exception;
	public List<Object[]> dakCreationList(String fromDate,String toDate) throws Exception;
	public List<Object[]> DakDestinationDetailsList(long dakCreateId) throws Exception;
	public DakCreate findByDakCreateId(long dakCreateId) throws Exception;
	public List<Object[]> selDestinationTypeList(long dakCreateId) throws Exception;
	public long getDakCreateLinkDetails(DakCreateLink link) throws Exception;
	public List<Object[]> DakCreateLinkList() throws Exception;
	public List<Object[]> dakCreateLinkData(long dakCreateId) throws Exception;
	public Object[] dakCreateattachmentdata(String dakattachmentid) throws Exception;
	public int DeleteDakCreateAttachment(String dakattachmentid) throws Exception;
	public int DeletedDakCreateLink(Long dakCreateId) throws Exception;
	public long saveDakCreate(DakCreate dakdata) throws Exception;
	public long updateIsActiveselDestination(long result, long destinationTypeId,int isActive) throws Exception;
	public List<Object[]> dakCreationPendingList() throws Exception;
	public long DakAssignUpdate(String empIdAssignDelete, String dakIdAssignDelete,int IsActive,String remarks) throws Exception;
	public long oldAssignEmpCount(long EmpId, Long dakId) throws Exception;
	public List<Object[]> dakListForTrack(String fromDate, String toDate) throws Exception;
	public Object[] getDakDataforShow(Long dakCreateId,String labCode) throws Exception;
	public long updateLabReply(Long seldakCreateId, Long seldestinationId, String reply,String modifiedBy,String modifiedDate) throws Exception;
	public Object[] SourceDetailData(String labCode) throws Exception;
	public List<Object[]> selectedNewDakEmployees(long dakCreateId,String labCode) throws Exception;
	
	
}
