package com.vts.dms.dak.service;

import java.util.Date;
import java.util.List;
import java.util.concurrent.Future;

import org.springframework.web.multipart.MultipartFile;

import com.vts.dms.dak.dto.DakAddDto;
import com.vts.dms.dak.dto.DakAssignDto;
import com.vts.dms.dak.dto.DakAssignReplyDto;
import com.vts.dms.dak.dto.DakAssignReplyRevDto;
import com.vts.dms.dak.dto.DakAttachmentDto;
import com.vts.dms.dak.dto.DakDestinationDto;
import com.vts.dms.dak.dto.DakPnCReplyDto;
import com.vts.dms.dak.dto.DakReplyDto;
import com.vts.dms.dak.dto.DakSeekResponseAttachDto;
import com.vts.dms.dak.dto.DakSeekResponseDto;
import com.vts.dms.dak.dto.MailDto;
import com.vts.dms.dak.dto.MarkDakDto;
import com.vts.dms.dak.model.DakAssignReply;
import com.vts.dms.dak.model.DakCreate;
import com.vts.dms.dak.model.DakCreateDestination;
import com.vts.dms.dak.model.DakMail;
import com.vts.dms.dak.model.DakMailSent;
import com.vts.dms.dak.model.DakMain;
import com.vts.dms.dak.model.DakMarking;
import com.vts.dms.dak.model.DakMemberType;
import com.vts.dms.dak.model.DakPnCReply;
import com.vts.dms.dak.model.DakRemind;
import com.vts.dms.dak.model.DakReply;
import com.vts.dms.dak.model.DakSeekResponse;
import com.vts.dms.master.model.NonProjectMaster;
import com.vts.dms.master.model.OtherProjectMaster;
import com.vts.dms.master.model.Source;

public interface DakService {
	public List<Object[]> SourceList() throws Exception;
	public List<Object[]> DakDeliveryList() throws Exception;
	public List<Object[]> getLetterTypeList() throws Exception;
	public List<Object[]> getPriorityList() throws Exception;
	public List<Object[]> getRelaventList(String lab) throws Exception;
	public long insertDak(DakAddDto dakdto,long empId,String[] resultArray,String[] DakLinkId)throws Exception;
	public long GetCountPrjDirEmpIdInPrev(long PrjDirEmpId,long DakId)throws Exception;
	public long DeletePrevPrjDirEmpId(long PrjDirEmpId,long DakId)throws Exception;
	public List<Object[]> DakPendingDistributionList(String DivisionCode,String LabCode,String UserName) throws Exception;
	public long DakAttachmentFile(DakAttachmentDto dakdto) throws Exception;
	public long DakEditAttachmentFile(DakAttachmentDto dakdto,DakAddDto dakdto1) throws Exception;
	public DakMain dakData(String dakId)throws Exception;
	public long saveDakEdit(String DakAttachmentId,DakAddDto dakdto,DakMain dak,String ActionCode,String[] DakLinkId,String[] resultArray)throws Exception;
	public List<Object[]> GetAttachmentDetails(long DakId,String type) throws Exception;
	public Object[] DakAttachmentData(String DakAttachmentId) throws Exception;
	public int DeleteAttachment(String DakAttachmentId) throws Exception;
	public List<Object[]> getDakMembers() throws Exception;
	public List<Object[]> EmployeeList()throws Exception;
	public long markDak(MarkDakDto markDak)throws Exception;
	public List<Object[]> DakMarkedList(String dakId) throws Exception;
	public List<Object[]> DakLinkList() throws Exception;
	public List<Object[]> NonProjectList() throws Exception;
	public List<Object[]> getAllMemberList2(int i)throws Exception;
	public List<DakMemberType> getAllMemberType()throws Exception;
	public List<Object[]> getAllMemberList(int i,String member,String lab)throws Exception;
	public long addDakMember(String memberType, String member,String UserName)throws Exception ;
	public List<Object[]> getActionList() throws Exception;
	public List<Object[]> getCwList() throws Exception;
	public List<Object[]> getDivisionList() throws Exception;
	public List<Object[]> getSelectEmpList(String []empid,String lab) throws Exception;
	public List<Object[]> getSelectDakEditList(String dakid) throws Exception;
	public List<Object[]> getReplyAttachDetails(long replyid,long empId ,String type) throws Exception;
	public Object[] DakReplyAttachmentData(String DakReplyAttachmentId) throws Exception;
	public int DeleteReplyAttachment(String DakAttachmentId) throws Exception;
	public List<Object[]> dakReceivedList(String fromDate ,String toDate,String statusValue,long EmpId,String Username) throws Exception;
	public List<Object[]> dakPendingReplyList(String fromDate ,String toDate,String StatusValue,long EmpId,String Username, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
   public Object[] dakReceivedView(long empId, long dakId) throws Exception;
	public List<Object[]> getDistributedEmps(String dakId) throws Exception;
	public List<Object[]> getDistributedAssignedEmps(String dakId) throws Exception;
	public List<Object[]> getFacilitatorsList(long MarkedEmpId,long dakId) throws Exception;
	public long DakDistribute(String dakId, String date,String[] EmpId,long MarkedEmpId,String username,String[] selectedCheck) throws Exception;
	public String getPriorityOfParticularDak(long dakId) throws Exception;
	public Future<Long> SendMailForMarkers(String dakId,long loggedInEmpId)throws Exception;
	public List<Object[]> getSelectSourceTypeList(String sourceId)throws Exception;
	public List<Object[]> dakLinkData(long dakId) throws Exception;
	public long DakAck(long empId,long dakIdSel,String AckDate) throws Exception;
	public long getDakMarkingInsert(DakMarking marking) throws Exception;
    public long DeleteSelMarkedEmployee(long DakId, long EmpId,long DakMemberTypeId,long dakMarkingId)throws Exception;
	public int RevokeMember(String dakMembersId,String UserName) throws Exception;
	public List<Object[]> DakDistributedList(long EmpId,String fromdate ,String todate) throws Exception;
	public long UpdateDakStatus(long dakIdSel) throws Exception;
	public List<Object[]> OtherProjectList() throws Exception;
	public List<Object[]> getassignemplist(String projectid,String lab,long EmpId) throws Exception;
	public List<Object[]> getseekResponseEmplist(String lab ,long EmpId,long divid) throws Exception;
	public Object getlabcode(long empId) throws Exception;
	public Object[] getUsername(long empId) throws Exception;
	public long DakAssignInsert(DakAssignDto dto,String[] DakCaseWorker,long EmpId) throws Exception;
	public long insertDakReply(DakReplyDto dakReplyDto)throws Exception;
	public long dakAssignstatus(long DakMarkingIdsel) throws Exception;
	public List<Object[]> getDakAssignedList(long empId,String fromDate,String toDate,long SelEmpId) throws Exception;
	public Object[] getDaknoviewlist(long dakid) throws Exception;
	public List<Object[]>  GetReplyModalDetails(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetReplyAttachmentList(long DakReplyId) throws Exception;
	public Object[] DakReplyAttachData(String ReplyAttachmentId) throws Exception;
	public DakMain GetDakDetails(long dakId)throws Exception;
    public List<Object[]>  GetDakReplyDetails(long dakReplyId)throws Exception;
	public DakReply GetDakReplyEditDetails(long dakReplyId)throws Exception;
	public List<Object[]>  ReplyDakAttachmentData (long DakReplyAttachId, long DakReplyId)throws Exception;
	public long DeleteReplyAttachment(long DakReplyAttachmentId) throws Exception;
	public long editDakReply(DakReplyDto dakReplyEditdto) throws Exception;
	public List<Object[]>  getEmpListForAssigning (long DakId,String lab, long EmpId)throws Exception;
	public List<Object[]>  GetCSWReplyModalDetails(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetSpecificMarkersCSWReplyDetails(long DakId,long DakMarkingId)throws Exception;
	public List<Object[]>  GetReplyCSWAttachmentList(long DakAssignReplyId) throws Exception;
	public List<Object[]>  GetParticularCSWReplyDetails(long DakAssignReplyId) throws Exception;
	public Object[] DakReplyCSWAttachData(String DakAssignReplyAttachmentId) throws Exception;
    public List<Object[]>  GetDakMarkersDetailsList (long DakId) throws Exception;
	public List<Object[]> DakDetailedList(String fromdate ,String todate,String StatusValue, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String empId,String DivisionCode,String LabCode,String UserName) throws Exception;
	public List<Object[]> DakDirectorList(String fromdate ,String todate, String StatusValue) throws Exception;
	public List<Object[]> DirPendingApprovalList(String lettertypeid,String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
	public List<Object[]> DakEmpDetailsList(String fromdate, String todate) throws Exception;
	public long UpdateDakDirAction(DakMarking dakMark, long EmpId)throws Exception;
	public List<Object[]> GetIndividualReplyDetails(long DakReplyId,long EmpId, long DakId)throws Exception;
	public long InsertDakAssignReply(DakAssignReplyDto dto) throws Exception;
	public long updateAssignStatus(long DakAssignId) throws Exception;
	public long InsertSourceDetails(Source source) throws Exception;
	public long InsertNonProjectDetails(NonProjectMaster nonProject) throws Exception;
	public long InsertOtherProjectDetails(OtherProjectMaster otherProject) throws Exception;
	public long EmpIdCountOfDM(long dakIdSel) throws Exception;
	public long DakAckCountOfDM(long dakIdSel) throws Exception;
	public long DakReplyCountInDR(long dakIdSel) throws Exception;
	public long UpdateDakStatusToDR(long dakId)throws Exception;
    public List<Object[]> DakPnCPendingReplyList(long EmpId,String LoginType, String fromDate, String toDate,String StatusValue) throws Exception;
	public List<Object[]> DakPnCList(long EmpId,String LoginType, String fromDate, String toDate,String StatusValue) throws Exception;
	public List<Object[]> DakPnCDoList(String fromDate, String toDate,String StatusValue, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String empId, String actionId) throws Exception;
	public List<Object[]>  DakDetailForPNCDO(long DakId) throws Exception;
	public List<Object[]>  GetReplyDetailsFrmDakReply(long DakId,long EmpId, String Username, String DakAdmin)throws Exception;
	public List<Object[]>  GetReplyAttachsFrmDakReplyAttach() throws Exception;
	public long  DirApprovalActionUpdate(String DirApprovalVal,long DakId)  throws Exception;
	public long  UpdateDirAprvForwarderIdAndDakStatus(long EmpId,long DakId,String DakStatus)  throws Exception;
    public long  insertPnCDakReply(DakPnCReplyDto PnCdto)  throws Exception;
    public List<Object[]>  GetMarkerReplySentForApprovalData(long DakId,long DirApvForwarderId)throws Exception;
	public List<Object[]>  GetPnCReplyDetails(long DakId)throws Exception;
	public List<Object[]>  GetPnCAttachReplyDetails(long DakPnCReplyId)throws Exception;
	public Object[] DakPnCReplyAttachData(String PnCReplyAttachId) throws Exception;
	public long DakApprovalUpdate(long DakId,String ApprovedBy,String ApprovedDate)throws Exception;
	public long DakApprovalWithCommtUpdate(long DakId,String ApprovalCommt,String ApprovedBy,String ApprovedDate)throws Exception;
	public long DakReturnUpdate(long DakId, String ReturnComment)throws Exception;
	public long DakPNCForwardUpdate(long DakId,String ForwardBy,String ForwardDate)throws Exception;
	public List<Object[]>  GetPnCReplyDataDetails(long PnCReplyId,long DakId)throws Exception;
	public List<Object[]>  ReplyDakPnCAttachmentData (long DakPnCReplyAttachId, long DakPnCReplyId)throws Exception;
	public long DeletePnCReplyAttachment(long PnCReplyAttachId,long DakPnCReplyId) throws Exception;
    public long  updatePnCDakReply(DakPnCReplyDto PnCdto)  throws Exception;
	public DakPnCReply GetPnCDetails(long DakPnCReplyId) throws Exception;
	public long DakCloseUpdate(long DakId,String closedBy,String closedDateTime,String closedDate,String closingCommt)throws Exception;
	public List<Object[]> DakClosedList(String fromDate,String toDate,String StatusValue,String LoginType,String Username,long EmpId, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId,String DivisionCode,String LabCode)throws Exception;
	public long DakReDistribute(String dakId, String date, String[] empId, long markedEmpId, String username) throws Exception;
	public long RevokeMarking(String markingId) throws Exception;
	public List<Object[]> DakMemberGroup() throws Exception;
	public List<Object[]> getDakmemberGroupEmpList(String[] groupid,String Labcode) throws Exception;
	public List<Object[]> getIndiMarkedEmpIdsFrmDakId(long DakId) throws Exception;
	public List<Object[]> AssignReplyRemarks(long empId, long dakIdSel) throws Exception;
	public List<Object[]> GetAssignReplyAttachmentList(long DakAsssignReplyId) throws Exception;
	public List<Object[]> GetDakAssignReplyDetails(long DakAsssignReplyId) throws Exception;
	public DakAssignReply GetDakAssignReplyEditDetails(long DakAssignReplyId) throws Exception;
	public long editDakAssignReply(DakAssignReplyDto dto)throws Exception;
	public List<Object[]> AssignReplyDakAttachmentData(long DakAssignReplyAttachId, long DakAssignReplyId) throws Exception;
	public int DeleteAssignReplyAttachment(String dakAssignReplyAttachId) throws Exception;
    public List<Object[]> DakMarkingData(long dakId) throws Exception;
	public List<Object[]> DakMarkedMemberGroup(String dakId) throws Exception;
	public List<Object[]> DakInactiveMarkedMemberGroup(String dakId) throws Exception;
	public long CSWReplyForwardReturn(long DakAssignReplyIdFrReturn,String ReturnRemarks) throws Exception;
	public List<Object[]> ProjectDetailedList(String projectId) throws Exception;
	public long CSWReplyForwardReturn(long DakAssignReplyIdFrReturn) throws Exception;
	public long ReplyeditDakAssignReply(DakAssignReplyDto dto) throws Exception;
	public long DakAssignReplyRev(DakAssignReplyRevDto rdto,String[] PrevFilePathandFileName) throws Exception;
	public List<Object[]> getDakActionRequiredEdit(long actionRequiredDakId) throws Exception;
	public long EditActionRequired(long ActionRequiredEditDakId, long ActionRequiredEdit,String ClosingAuthority,String EditRemarks) throws Exception;
	public long EditActionRequired(long ActionRequiredEditDakId, long ActionRequiredEdit, String dueDate, String actionTime,String ClosingAuthority,String EditRemarks) throws Exception;
	public long updatedakmarkingaction(long ActionRequiredEditDakId, long actionId,String dueDate) throws Exception;
	public long updatedakmarkingrecords(long ActionRequiredEditDakId, long actionId) throws Exception;
	public long reupdateremarkstatus(String dakId) throws Exception;
	public List<Object[]> getReDistributedEmps(String dakId) throws Exception;
	public List<Object[]> getOldassignemplist(long DakId) throws Exception;
	public long UpdateMarkerAction(long DakId, long DakMarkingId, long EmpId, String actionValue) throws Exception;
	public List<Object[]> DakAssignedByMeList(long EmpId,String fromDate, String toDate,long SelEMpId) throws Exception;
	public List<Object[]> getalldaklinkdata(long DakId) throws Exception;
	public List<Object[]> DakRemarknRedistributeList(String fromDate, String toDate, String statusValue) throws Exception;
	public long DakSeekResponseInsert(DakSeekResponseDto dto, String[] dakCaseWorker,long EmpId) throws Exception;
	public List<Object[]> getDakSeekResponseListToMe(long empId, String fromDate, String toDate) throws Exception;
	public List<Object[]> DakSeekResponseByMeList(long empId, String fromDate, String toDate) throws Exception;
	public long InsertDakSeekResponseReply(DakSeekResponseAttachDto dto) throws Exception;
	public List<Object[]> GetSeekResponseRelyModalDetails(long DakId, long empId, String username,String createdBy) throws Exception;
	public List<Object[]> GetSeekResponseReplyAttachmentList(long DakReplyId) throws Exception;
	public List<Object[]> GetDakSeekResponseReplyDetails(long DakReplyId) throws Exception;
	public DakSeekResponse GetDakSeekResponseReplyEditDetails(long DakReplyId) throws Exception;
	public List<Object[]> SeekResponseReplyDakAttachmentData(long DakReplyAttachId, long DakReplyId) throws Exception;
	public int DeleteSeekResponseReplyAttachment(String dakReplyAttachId) throws Exception;
	public long editSeekResponseDakReply(DakSeekResponseAttachDto dakReplyEditdto) throws Exception;
	public Object[] DakSeekResponseAttachmentData(String dakattachmentid) throws Exception;
	public List<Object[]> getoldSeekResponseassignemplist(long DakId) throws Exception;
	public List<Object[]> PrevMarkedEmployees(long DakId) throws Exception;
	public long AddToFavourites(long DakMarkingId) throws Exception;
	public long RemoveFavourites(long DakMarkingId) throws Exception;
	public List<Object[]> DakRepliedToMeList(String username, String fromDate, String toDate) throws Exception;
	public List<Object[]> DakRepliedByMeList(long empId, String fromDate, String toDate, String lettertypeid, String priorityid, String sourcedetailid, String sourceId, String projectType, String projectId, String dakMemberTypeId, String employeeId) throws Exception;
	public List<Object[]> getEmpListForSeekResponse(long DakId, String lab, long empId) throws Exception;
	public Object[] getClosedByDetails(String closedBy) throws Exception;
	public List<Object[]> EmpListDropDown(String lab) throws Exception;
	public Object[] MarkedEmpCounts(String emp, String fromDate, String toDate, String username) throws Exception;
	public Object[] AssignedEmpCounts(String emp, String fromDate, String toDate, String username) throws Exception;
	public Object[] dakReceivedViewrecived(long empId, long dakId) throws Exception;
	public List<Object[]> AssignData(long dakId, long empId) throws Exception;
	public List<Object[]> SeekResponseData(long dakId, long empId) throws Exception;
	public List<Object[]> MarkerData(long dakId, long empId) throws Exception;
	public List<Object[]> getSeekResponseList(long MarkedEmpId, long DakId) throws Exception;
	public List<Object[]> getFacilitatorSeekResponseList(long AssignEmpId, long DakId) throws Exception;
	public List<Object[]> getRemindEmployeeList(long DakId) throws Exception;
	public long InsertDakRemind(DakRemind modal) throws Exception;
	public List<Object[]> getRemindToDetailsList(long DakId,long EmpId) throws Exception;
	public List<Object[]> getPerticularRemindToDetails(long DakId, long empId) throws Exception;
	public long UpdateDakRemind(String reply, long dakId, long empId, String ReplyDate) throws Exception;
	public Object[] EnoteAssignReplyData(long DakId,long EmpId) throws Exception;
	public List<Object[]> EnoteAssignReplyAttachmentData(long DakId) throws Exception;
	public List<Object[]> InitiatedByEmployeeList(long divisionId, String lab) throws Exception;
	public Object getDivisionId(long empId) throws Exception;
	public Object[] EnoteMarkerReplyData(long DakId, long empId) throws Exception;
	public List<Object[]> EnoteMarkerReplyAttachmentData(long DakReplyId) throws Exception;
	public Object[] MailSentDetails(String TypeOfHost) throws Exception;
	public List<Object[]> MailReceivedEmpDetails(long empId, String hostType) throws Exception;
	public long insertDakCreate(DakAddDto dakdto, Long EmpId, String[] dakLinkId) throws Exception;
	public long insertLabDak(DakAddDto dakdto, Long EmpId, MultipartFile maindoc, MultipartFile[] sobdocs) throws Exception;
	public Object[] labDakData(long result) throws Exception;
	public long insertDakDestination(DakCreateDestination destination) throws Exception;
	public List<Object[]> dakCreationList(String fromDate,String toDate) throws Exception;
	public List<Object[]> DakDestinationDetailsList(long DakCreateId, String LabCode) throws Exception;
	public DakCreate findByDakCreateId(long DakCreateId) throws Exception;
	public List<Object[]> selDestinationTypeList(long DakCreateId) throws Exception;
	public List<Object[]> DakCreateLinkList() throws Exception;
	public List<Object[]> dakCreateLinkData(long DakCreateId) throws Exception;
	public List<Object[]> GetDakCreateAttachmentDetails(long DakId, String attachtype) throws Exception;
	public Object[] dakCreateattachmentdata(String dakattachmentid) throws Exception;
	public int DeleteDakCreateAttachment(String dakattachmentid) throws Exception;
	public long saveDakCreateEdit(String dakAttachmentId, DakAddDto dakdto, DakCreate dak, String actionCode,String[] dakLinkId) throws Exception;
	public long updateIsActiveselDestination(long result, long DestinationTypeId,int isActive) throws Exception;
	public List<Object[]> dakCreationPendingList() throws Exception;
	public long DakAssignUpdate(String empIdAssignDelete, String dakIdAssignDelete,int IsActive,String Remarks) throws Exception;
	public List<Object[]> dakListForTrack(String fromDate, String toDate) throws Exception;
	public Object[] getDakDataforShow(Long dakCreateId,String labCode) throws Exception;
	public List<Object[]> LabDakTrackingList(String dakId, String url) throws Exception;
	public long insertMainLabDAKReply(DakDestinationDto dto) throws Exception;
	public long updateLabReply(Long seldakCreateId, Long seldestinationId, String reply,String modifiedBy,String modifiedDate) throws Exception;
	public Object[] SourceDetailData(String labCode) throws Exception;
	public long newinsertDak(DakAddDto dakdto, Long empId, String[] dakLinkId) throws Exception;
	public List<Object[]> selectedNewDakEmployees(long dakCreateId,String labCode) throws Exception;
	public List<Object[]> closingAuthorityList() throws Exception;
}
